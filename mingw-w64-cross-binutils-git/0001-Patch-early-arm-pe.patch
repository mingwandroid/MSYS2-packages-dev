From 093ec986a3608f5eb4d8f45e74786ed7791115c2 Mon Sep 17 00:00:00 2001
From: Kai Tietz <ktietz@daphne.(none)>
Date: Wed, 24 Sep 2014 15:44:22 -0700
Subject: [PATCH 1/3] Patch early arm pe

---
 bfd/coff-arm.c                           | 371 ++++++++++---------------------
 bfd/coffcode.h                           |  11 +-
 bfd/config.bfd                           |   2 +-
 bfd/peicode.h                            |  15 ++
 gas/config/tc-arm.c                      |  20 +-
 gas/testsuite/gas/arm/t2-branch-global.d |   2 +-
 ld/emulparams/arm_wince_pe.sh            |   2 +
 ld/emultempl/pe.em                       |   6 +-
 8 files changed, 157 insertions(+), 272 deletions(-)

diff --git a/bfd/coff-arm.c b/bfd/coff-arm.c
index d47b77e..4435490 100644
--- a/bfd/coff-arm.c
+++ b/bfd/coff-arm.c
@@ -146,7 +146,12 @@ coff_arm_reloc (bfd *abfd,
       }
 
   /* Now let bfd_perform_relocation finish everything up.  */
+#ifndef ARM_WINCE
   return bfd_reloc_continue;
+#else
+  /* This seems to fix ARM_32 relocations to external functions. */
+  return bfd_reloc_ok;
+#endif
 }
 
 /* If USER_LABEL_PREFIX is defined as "_" (see coff_arm_is_local_label_name()
@@ -172,6 +177,10 @@ coff_arm_reloc (bfd *abfd,
 #define ARM_THUMB12  4
 #define ARM_SECTION  14
 #define ARM_SECREL   15
+#define ARM_MOV32T   17
+#define ARM_BRANCH20T 18
+#define ARM_BRANCH24T 20
+#define ARM_BLX23T    21
 
 #else
 
@@ -193,19 +202,32 @@ coff_arm_reloc (bfd *abfd,
 
 #endif
 
-static bfd_reloc_status_type aoutarm_fix_pcrel_26_done
+static bfd_reloc_status_type bfd_coff_generic_reloc
   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
-static bfd_reloc_status_type aoutarm_fix_pcrel_26
-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
-static bfd_reloc_status_type coff_thumb_pcrel_12
-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
-#ifndef ARM_WINCE
-static bfd_reloc_status_type coff_thumb_pcrel_9
-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
-static bfd_reloc_status_type coff_thumb_pcrel_23
+#ifdef ARM_WINCE
+static bfd_reloc_status_type coff_reloc_mov32t
   (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);
 #endif
 
+static bfd_reloc_status_type
+bfd_coff_generic_reloc (bfd *abfd ATTRIBUTE_UNUSED,
+                        arelent *reloc_entry,
+                        asymbol *symbol,
+                        void * data ATTRIBUTE_UNUSED,
+                        asection *input_section,
+                        bfd *output_bfd,
+                        char **error_message ATTRIBUTE_UNUSED)
+{
+  if (output_bfd != (bfd *) NULL
+      && (symbol->flags & BSF_SECTION_SYM) == 0)
+    {
+      reloc_entry->address += input_section->output_offset;
+      return bfd_reloc_ok;
+    }
+
+  return bfd_reloc_continue;
+}
+
 static reloc_howto_type aoutarm_std_reloc_howto[] =
   {
 #ifdef ARM_WINCE
@@ -216,7 +238,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_dont,
-	   aoutarm_fix_pcrel_26_done,
+	   bfd_coff_generic_reloc,
 	   "ARM_26D",
 	   TRUE, 	/* partial_inplace.  */
 	   0x00ffffff,
@@ -234,7 +256,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE, 	/* partial_inplace.  */
 	   0xffffffff,
 	   0xffffffff,
-	   PCRELOFFSET),
+	   FALSE),
     HOWTO (ARM_RVA32,
 	   0,
 	   2,
@@ -255,7 +277,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   aoutarm_fix_pcrel_26 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_26",
 	   FALSE,
 	   0x00ffffff,
@@ -268,7 +290,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   coff_thumb_pcrel_12 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_THUMB12",
 	   FALSE,
 	   0x000007ff,
@@ -309,6 +331,60 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   0xffffffff,
 	   0xffffffff,
 	   PCRELOFFSET),
+    EMPTY_HOWTO (-1), /* ARM_MOV32A */
+    HOWTO (ARM_MOV32T,
+	   0,
+	   2,
+	   16,
+	   FALSE,
+	   0,
+	   complain_overflow_bitfield,
+	   coff_reloc_mov32t,
+	   "ARM_MOV32T",
+	   FALSE, 	/* partial_inplace.  */
+	   0x040f70ff,
+	   0x040f70ff,
+	   FALSE),
+    HOWTO (ARM_BRANCH20T,
+	   1,
+	   2,
+	   19,
+	   TRUE,
+	   0,
+	   complain_overflow_bitfield,
+	   bfd_coff_generic_reloc,
+	   "ARM_BRANCH20T",
+	   FALSE, 	/* partial_inplace.  */
+	   0x043f2fff,
+	   0x043f2fff,
+	   PCRELOFFSET),
+    EMPTY_HOWTO (-1), /* unallocated */
+    HOWTO (ARM_BRANCH24T,
+	   1,
+	   2,
+	   24,
+	   TRUE,
+	   0,
+	   complain_overflow_bitfield,
+	   bfd_coff_generic_reloc,
+	   "ARM_BRANCH24T",
+	   FALSE, 	/* partial_inplace.  */
+	   0x07ff2fff,
+	   0x07ff2fff,
+	   PCRELOFFSET),
+    HOWTO (ARM_BLX23T,
+	   2,
+	   2,
+	   24,
+	   TRUE,
+	   0,
+	   complain_overflow_bitfield,
+	   bfd_coff_generic_reloc,
+	   "ARM_BLX23T",
+	   FALSE, 	/* partial_inplace.  */
+	   0x07ff2fff,
+	   0x07ff2fff,
+	   PCRELOFFSET),
 #else /* not ARM_WINCE */
     HOWTO (ARM_8,
 	   0,
@@ -356,7 +432,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   aoutarm_fix_pcrel_26 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_26",
 	   FALSE,
 	   0x00ffffff,
@@ -408,7 +484,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   FALSE,
 	   0,
 	   complain_overflow_dont,
-	   aoutarm_fix_pcrel_26_done,
+	   bfd_coff_generic_reloc,
 	   "ARM_26D",
 	   TRUE,
 	   0x00ffffff,
@@ -462,7 +538,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   coff_thumb_pcrel_9 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_THUMB9",
 	   FALSE,
 	   0x000000ff,
@@ -475,7 +551,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   coff_thumb_pcrel_12 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_THUMB12",
 	   FALSE,
 	   0x000007ff,
@@ -488,7 +564,7 @@ static reloc_howto_type aoutarm_std_reloc_howto[] =
 	   TRUE,
 	   0,
 	   complain_overflow_signed,
-	   coff_thumb_pcrel_23 ,
+	   bfd_coff_generic_reloc,
 	   "ARM_THUMB23",
 	   FALSE,
 	   0x07ff07ff,
@@ -565,249 +641,20 @@ coff_arm_rtype_to_howto (bfd *abfd ATTRIBUTE_UNUSED,
   return howto;
 }
 
-/* Used by the assembler.  */
-
+#ifdef ARM_WINCE
 static bfd_reloc_status_type
-aoutarm_fix_pcrel_26_done (bfd *abfd ATTRIBUTE_UNUSED,
-			   arelent *reloc_entry ATTRIBUTE_UNUSED,
-			   asymbol *symbol ATTRIBUTE_UNUSED,
-			   void * data ATTRIBUTE_UNUSED,
-			   asection *input_section ATTRIBUTE_UNUSED,
-			   bfd *output_bfd ATTRIBUTE_UNUSED,
-			   char **error_message ATTRIBUTE_UNUSED)
+coff_reloc_mov32t (bfd *abfd ATTRIBUTE_UNUSED,
+		   arelent *reloc_entry ATTRIBUTE_UNUSED,
+		   asymbol *symbol ATTRIBUTE_UNUSED,
+		   void * data ATTRIBUTE_UNUSED,
+		   asection *input_section ATTRIBUTE_UNUSED,
+		   bfd *output_bfd ATTRIBUTE_UNUSED,
+		   char **error_message ATTRIBUTE_UNUSED)
 {
-  /* This is dead simple at present.  */
   return bfd_reloc_ok;
 }
+#endif
 
-/* Used by the assembler.  */
-
-static bfd_reloc_status_type
-aoutarm_fix_pcrel_26 (bfd *abfd,
-		      arelent *reloc_entry,
-		      asymbol *symbol,
-		      void * data,
-		      asection *input_section,
-		      bfd *output_bfd,
-		      char **error_message ATTRIBUTE_UNUSED)
-{
-  bfd_vma relocation;
-  bfd_size_type addr = reloc_entry->address;
-  long target = bfd_get_32 (abfd, (bfd_byte *) data + addr);
-  bfd_reloc_status_type flag = bfd_reloc_ok;
-
-  /* If this is an undefined symbol, return error.  */
-  if (bfd_is_und_section (symbol->section)
-      && (symbol->flags & BSF_WEAK) == 0)
-    return output_bfd ? bfd_reloc_continue : bfd_reloc_undefined;
-
-  /* If the sections are different, and we are doing a partial relocation,
-     just ignore it for now.  */
-  if (symbol->section->name != input_section->name
-      && output_bfd != (bfd *)NULL)
-    return bfd_reloc_continue;
-
-  relocation = (target & 0x00ffffff) << 2;
-  relocation = (relocation ^ 0x02000000) - 0x02000000; /* Sign extend.  */
-  relocation += symbol->value;
-  relocation += symbol->section->output_section->vma;
-  relocation += symbol->section->output_offset;
-  relocation += reloc_entry->addend;
-  relocation -= input_section->output_section->vma;
-  relocation -= input_section->output_offset;
-  relocation -= addr;
-
-  if (relocation & 3)
-    return bfd_reloc_overflow;
-
-  /* Check for overflow.  */
-  if (relocation & 0x02000000)
-    {
-      if ((relocation & ~ (bfd_vma) 0x03ffffff) != ~ (bfd_vma) 0x03ffffff)
-	flag = bfd_reloc_overflow;
-    }
-  else if (relocation & ~(bfd_vma) 0x03ffffff)
-    flag = bfd_reloc_overflow;
-
-  target &= ~0x00ffffff;
-  target |= (relocation >> 2) & 0x00ffffff;
-  bfd_put_32 (abfd, (bfd_vma) target, (bfd_byte *) data + addr);
-
-  /* Now the ARM magic... Change the reloc type so that it is marked as done.
-     Strictly this is only necessary if we are doing a partial relocation.  */
-  reloc_entry->howto = &aoutarm_std_reloc_howto[ARM_26D];
-
-  return flag;
-}
-
-static bfd_reloc_status_type
-coff_thumb_pcrel_common (bfd *abfd,
-			 arelent *reloc_entry,
-			 asymbol *symbol,
-			 void * data,
-			 asection *input_section,
-			 bfd *output_bfd,
-			 char **error_message ATTRIBUTE_UNUSED,
-			 thumb_pcrel_branchtype btype)
-{
-  bfd_vma relocation = 0;
-  bfd_size_type addr = reloc_entry->address;
-  long target = bfd_get_32 (abfd, (bfd_byte *) data + addr);
-  bfd_reloc_status_type flag = bfd_reloc_ok;
-  bfd_vma dstmsk;
-  bfd_vma offmsk;
-  bfd_vma signbit;
-
-  /* NOTE: This routine is currently used by GAS, but not by the link
-     phase.  */
-  switch (btype)
-    {
-    case b9:
-      dstmsk  = 0x000000ff;
-      offmsk  = 0x000001fe;
-      signbit = 0x00000100;
-      break;
-
-    case b12:
-      dstmsk  = 0x000007ff;
-      offmsk  = 0x00000ffe;
-      signbit = 0x00000800;
-      break;
-
-    case b23:
-      dstmsk  = 0x07ff07ff;
-      offmsk  = 0x007fffff;
-      signbit = 0x00400000;
-      break;
-
-    default:
-      abort ();
-    }
-
-  /* If this is an undefined symbol, return error.  */
-  if (bfd_is_und_section (symbol->section)
-      && (symbol->flags & BSF_WEAK) == 0)
-    return output_bfd ? bfd_reloc_continue : bfd_reloc_undefined;
-
-  /* If the sections are different, and we are doing a partial relocation,
-     just ignore it for now.  */
-  if (symbol->section->name != input_section->name
-      && output_bfd != (bfd *)NULL)
-    return bfd_reloc_continue;
-
-  switch (btype)
-    {
-    case b9:
-    case b12:
-      relocation = ((target & dstmsk) << 1);
-      break;
-
-    case b23:
-      if (bfd_big_endian (abfd))
-	relocation = ((target & 0x7ff) << 1)  | ((target & 0x07ff0000) >> 4);
-      else
-	relocation = ((target & 0x7ff) << 12) | ((target & 0x07ff0000) >> 15);
-      break;
-
-    default:
-      abort ();
-    }
-
-  relocation = (relocation ^ signbit) - signbit; /* Sign extend.  */
-  relocation += symbol->value;
-  relocation += symbol->section->output_section->vma;
-  relocation += symbol->section->output_offset;
-  relocation += reloc_entry->addend;
-  relocation -= input_section->output_section->vma;
-  relocation -= input_section->output_offset;
-  relocation -= addr;
-
-  if (relocation & 1)
-    return bfd_reloc_overflow;
-
-  /* Check for overflow.  */
-  if (relocation & signbit)
-    {
-      if ((relocation & ~offmsk) != ~offmsk)
-	flag = bfd_reloc_overflow;
-    }
-  else if (relocation & ~offmsk)
-    flag = bfd_reloc_overflow;
-
-  target &= ~dstmsk;
-  switch (btype)
-   {
-   case b9:
-   case b12:
-     target |= (relocation >> 1);
-     break;
-
-   case b23:
-     if (bfd_big_endian (abfd))
-       target |= (((relocation & 0xfff) >> 1)
-		  | ((relocation << 4)  & 0x07ff0000));
-     else
-       target |= (((relocation & 0xffe) << 15)
-		  | ((relocation >> 12) & 0x7ff));
-     break;
-
-   default:
-     abort ();
-   }
-
-  bfd_put_32 (abfd, (bfd_vma) target, (bfd_byte *) data + addr);
-
-  /* Now the ARM magic... Change the reloc type so that it is marked as done.
-     Strictly this is only necessary if we are doing a partial relocation.  */
-  reloc_entry->howto = & aoutarm_std_reloc_howto [ARM_26D];
-
-  /* TODO: We should possibly have DONE entries for the THUMB PCREL relocations.  */
-  return flag;
-}
-
-#ifndef ARM_WINCE
-static bfd_reloc_status_type
-coff_thumb_pcrel_23 (bfd *abfd,
-		     arelent *reloc_entry,
-		     asymbol *symbol,
-		     void * data,
-		     asection *input_section,
-		     bfd *output_bfd,
-		     char **error_message)
-{
-  return coff_thumb_pcrel_common (abfd, reloc_entry, symbol, data,
-                                  input_section, output_bfd, error_message,
-				  b23);
-}
-
-static bfd_reloc_status_type
-coff_thumb_pcrel_9 (bfd *abfd,
-		    arelent *reloc_entry,
-		    asymbol *symbol,
-		    void * data,
-		    asection *input_section,
-		    bfd *output_bfd,
-		    char **error_message)
-{
-  return coff_thumb_pcrel_common (abfd, reloc_entry, symbol, data,
-                                  input_section, output_bfd, error_message,
-				  b9);
-}
-#endif /* not ARM_WINCE */
-
-static bfd_reloc_status_type
-coff_thumb_pcrel_12 (bfd *abfd,
-		     arelent *reloc_entry,
-		     asymbol *symbol,
-		     void * data,
-		     asection *input_section,
-		     bfd *output_bfd,
-		     char **error_message)
-{
-  return coff_thumb_pcrel_common (abfd, reloc_entry, symbol, data,
-                                  input_section, output_bfd, error_message,
-				  b12);
-}
 
 static const struct reloc_howto_struct *
 coff_arm_reloc_type_lookup (bfd * abfd, bfd_reloc_code_real_type code)
@@ -829,9 +676,14 @@ coff_arm_reloc_type_lookup (bfd * abfd, bfd_reloc_code_real_type code)
 #ifdef ARM_WINCE
       ASTD (BFD_RELOC_32,                   ARM_32);
       ASTD (BFD_RELOC_RVA,                  ARM_RVA32);
-      ASTD (BFD_RELOC_ARM_PCREL_BRANCH,     ARM_26);
-      ASTD (BFD_RELOC_THUMB_PCREL_BRANCH12, ARM_THUMB12);
+       ASTD (BFD_RELOC_ARM_PCREL_BRANCH,     ARM_26);
+       ASTD (BFD_RELOC_THUMB_PCREL_BRANCH12, ARM_THUMB12);
       ASTD (BFD_RELOC_32_SECREL,            ARM_SECREL);
+       ASTD (BFD_RELOC_THUMB_PCREL_BRANCH23, ARM_BLX23T);
+       ASTD (BFD_RELOC_THUMB_PCREL_BLX,      ARM_BLX23T);
+      ASTD (BFD_RELOC_THUMB_PCREL_BRANCH25, ARM_BRANCH24T);
+      ASTD (BFD_RELOC_THUMB_PCREL_BRANCH20, ARM_BRANCH20T);
+      ASTD (BFD_RELOC_ARM_THUMB_MOVW,       ARM_MOV32T);
 #else
       ASTD (BFD_RELOC_8,                    ARM_8);
       ASTD (BFD_RELOC_16,                   ARM_16);
@@ -1236,7 +1088,7 @@ coff_arm_relocate_section (bfd *output_bfd,
     	       TRUE,
     	       0,
     	       complain_overflow_signed,
-    	       aoutarm_fix_pcrel_26 ,
+    	       bfd_coff_generic_reloc,
     	       "ARM_26",
     	       TRUE,
     	       0x00ffffff,
@@ -2558,3 +2410,4 @@ extern const bfd_target TARGET_BIG_SYM ;
 /* Target vectors.  */
 CREATE_LITTLE_COFF_TARGET_VEC (TARGET_LITTLE_SYM, TARGET_LITTLE_NAME, D_PAGED, EXTRA_S_FLAGS, TARGET_UNDERSCORE, & TARGET_BIG_SYM, COFF_SWAP_TABLE)
 CREATE_BIG_COFF_TARGET_VEC (TARGET_BIG_SYM, TARGET_BIG_NAME, D_PAGED, EXTRA_S_FLAGS, TARGET_UNDERSCORE, & TARGET_LITTLE_SYM, COFF_SWAP_TABLE)
+
diff --git a/bfd/coffcode.h b/bfd/coffcode.h
index 6678b88..04a352a 100644
--- a/bfd/coffcode.h
+++ b/bfd/coffcode.h
@@ -2124,6 +2124,7 @@ coff_set_arch_mach_hook (bfd *abfd, void * filehdr)
     case ARMMAGIC:
     case ARMPEMAGIC:
     case THUMBPEMAGIC:
+    case ARMV7PEMAGIC:
       arch = bfd_arch_arm;
       machine = bfd_arm_get_mach_from_notes (abfd, ARM_NOTE_SECTION);
       if (machine == bfd_mach_arm_unknown)
@@ -2890,7 +2891,11 @@ coff_set_flags (bfd * abfd,
 #ifdef ARMMAGIC
     case bfd_arch_arm:
 #ifdef ARM_WINCE
+#ifdef ARMV7_WIN
+      * magicp = ARMV7PEMAGIC;
+#else
       * magicp = ARMPEMAGIC;
+#endif
 #else
       * magicp = ARMMAGIC;
 #endif
@@ -2919,9 +2924,9 @@ coff_set_flags (bfd * abfd,
 	case bfd_mach_arm_5:  * flagsp |= F_ARM_5;  break;
 	  /* FIXME: we do not have F_ARM vaues greater than F_ARM_5.
 	     See also the comment in coff_set_arch_mach_hook().  */
-	case bfd_mach_arm_5T: * flagsp |= F_ARM_5;  break;
-	case bfd_mach_arm_5TE: * flagsp |= F_ARM_5; break;
-	case bfd_mach_arm_XScale: * flagsp |= F_ARM_5; break;
+	case bfd_mach_arm_5T: * flagsp |= F_ARM_3M;  break;
+	case bfd_mach_arm_5TE: * flagsp |= F_ARM_3M; break;
+	case bfd_mach_arm_XScale: * flagsp |= F_ARM_3M; break;
 	}
       return TRUE;
 #endif
diff --git a/bfd/config.bfd b/bfd/config.bfd
index 7bcb92a..05ab14b 100644
--- a/bfd/config.bfd
+++ b/bfd/config.bfd
@@ -304,7 +304,7 @@ case "${targ}" in
     targ_defvec=arm_pe_wince_le_vec
     targ_selvecs="arm_pe_wince_le_vec arm_pe_wince_be_vec arm_pei_wince_le_vec arm_pei_wince_be_vec"
     targ_underscore=no
-    targ_cflags="-DARM_WINCE -DARM_COFF_BUGFIX"
+    targ_cflags="-DARM_WINCE -DARMV7_WIN -DARM_COFF_BUGFIX"
     ;;
   arm-*-pe*)
     targ_defvec=arm_pe_le_vec
diff --git a/bfd/peicode.h b/bfd/peicode.h
index 157879b..15445a4 100644
--- a/bfd/peicode.h
+++ b/bfd/peicode.h
@@ -717,6 +717,13 @@ static jump_table jtab[] =
     16, 12
   },
 #endif
+#ifdef ARMV7PEMAGIC
+  { ARMV7PEMAGIC,
+    { 0x40, 0xb4, 0x02, 0x4e, 0x36, 0x68, 0xb4, 0x46,
+      0x40, 0xbc, 0x60, 0x47, 0x00, 0x00, 0x00, 0x00 },
+    16, 12
+  },
+#endif
   { 0, { 0 }, 0, 0 }
 };
 
@@ -1146,9 +1153,13 @@ pe_ILF_object_p (bfd * abfd)
       break;
 
     case IMAGE_FILE_MACHINE_ARM:
+#ifdef ARMV7PEMAGIC
+      magic = ARMV7PEMAGIC;
+#else
 #ifdef ARMPEMAGIC
       magic = ARMPEMAGIC;
 #endif
+#endif
       break;
 
     case IMAGE_FILE_MACHINE_THUMB:
@@ -1157,7 +1168,11 @@ pe_ILF_object_p (bfd * abfd)
 	extern const bfd_target TARGET_LITTLE_SYM;
 
 	if (abfd->xvec == & TARGET_LITTLE_SYM)
+#ifdef ARMV7PEMAGIC
+	  magic = ARMV7PEMAGIC;
+#else
 	  magic = THUMBPEMAGIC;
+#endif
       }
 #endif
       break;
diff --git a/gas/config/tc-arm.c b/gas/config/tc-arm.c
index 5077f87..0f173b0 100644
--- a/gas/config/tc-arm.c
+++ b/gas/config/tc-arm.c
@@ -138,7 +138,11 @@ static int fix_v4bx	     = FALSE;
 static int warn_on_deprecated = TRUE;
 
 /* Understand CodeComposer Studio assembly syntax.  */
+#ifdef TE_WINCE
+bfd_boolean codecomposer_syntax = TRUE;
+#else
 bfd_boolean codecomposer_syntax = FALSE;
+#endif
 
 /* Variables that we set while parsing command-line options.  Once all
    options have been read we re-process these values to set the real
@@ -868,7 +872,11 @@ static void it_fsm_post_encode (void);
 
 /* This array holds the chars that always start a comment.  If the
    pre-processor is disabled, these aren't very useful.	 */
+#ifdef TE_WINCE
+char arm_comment_chars[] = "@;";
+#else
 char arm_comment_chars[] = "@";
+#endif
 
 /* This array holds the chars that only start a comment at the beginning of
    a line.  If the line seems to have the form '# 123 filename'
@@ -879,7 +887,11 @@ char arm_comment_chars[] = "@";
 /* Also note that comments like this one will always work.  */
 const char line_comment_chars[] = "#";
 
+#ifdef TE_WINCE
+char arm_line_separator_chars[] = "\0\0";
+#else
 char arm_line_separator_chars[] = ";";
+#endif
 
 /* Chars that can be used to separate mant
    from exp in floating point numbers.	*/
@@ -3474,14 +3486,15 @@ s_ltorg (int ignored ATTRIBUTE_UNUSED)
   pool->symbol = NULL;
 }
 
-#ifdef OBJ_ELF
 /* Forward declarations for functions below, in the MD interface
    section.  */
 static void fix_new_arm (fragS *, int, short, expressionS *, int, int);
+#ifdef OBJ_ELF
 static valueT create_unwind_entry (int);
 static void start_unwind_section (const segT, int);
 static void add_unwind_opcode (valueT, int);
 static void flush_pending_unwind (void);
+#endif
 
 /* Directives: Data.  */
 
@@ -3738,6 +3751,7 @@ s_arm_rel31 (int ignored ATTRIBUTE_UNUSED)
   demand_empty_rest_of_line ();
 }
 
+#ifdef OBJ_ELF
 /* Directives: AEABI stack-unwind tables.  */
 
 /* Parse an unwind_fnstart directive.  Simply records the current location.  */
@@ -4693,13 +4707,13 @@ const pseudo_typeS md_pseudo_table[] =
   { "object_arch", s_arm_object_arch,	0 },
   { "fpu",	   s_arm_fpu,	  0 },
   { "arch_extension", s_arm_arch_extension, 0 },
-#ifdef OBJ_ELF
   { "word",	        s_arm_elf_cons, 4 },
   { "long",	        s_arm_elf_cons, 4 },
   { "inst.n",           s_arm_elf_inst, 2 },
   { "inst.w",           s_arm_elf_inst, 4 },
   { "inst",             s_arm_elf_inst, 0 },
   { "rel31",	        s_arm_rel31,	  0 },
+#ifdef OBJ_ELF
   { "fnstart",		s_arm_unwind_fnstart,	0 },
   { "fnend",		s_arm_unwind_fnend,	0 },
   { "cantunwind",	s_arm_unwind_cantunwind, 0 },
@@ -4715,7 +4729,7 @@ const pseudo_typeS md_pseudo_table[] =
   { "eabi_attribute",	s_arm_eabi_attribute,	0 },
   { "tlsdescseq",	s_arm_tls_descseq,      0 },
 #else
-  { "word",	   cons, 4},
+  /* { "word",	   cons, 4}, */
 
   /* These are used for dwarf.  */
   {"2byte", cons, 2},
diff --git a/gas/testsuite/gas/arm/t2-branch-global.d b/gas/testsuite/gas/arm/t2-branch-global.d
index 5850d6b..8dee280 100644
--- a/gas/testsuite/gas/arm/t2-branch-global.d
+++ b/gas/testsuite/gas/arm/t2-branch-global.d
@@ -11,4 +11,4 @@ Disassembly of section .text:
 
 00000000 <foo>:
    0:	f... b... 	b\.w	.*
-			0: R_ARM_THM_JUMP24	\*ABS\*.*
+			0: (R_ARM_THM_JUMP24|ARM_BRANCH24T)	\*ABS\*.*
diff --git a/ld/emulparams/arm_wince_pe.sh b/ld/emulparams/arm_wince_pe.sh
index 133a51c..8c95287 100644
--- a/ld/emulparams/arm_wince_pe.sh
+++ b/ld/emulparams/arm_wince_pe.sh
@@ -11,3 +11,5 @@ TEMPLATE_NAME=pe
 SUBSYSTEM=PE_DEF_SUBSYSTEM
 INITIAL_SYMBOL_CHAR=\"\"
 TARGET_PAGE_SIZE=0x1000
+GENERATE_AUTO_IMPORT_SCRIPT=1
+
diff --git a/ld/emultempl/pe.em b/ld/emultempl/pe.em
index 979cc8b..4d4e909 100644
--- a/ld/emultempl/pe.em
+++ b/ld/emultempl/pe.em
@@ -116,7 +116,7 @@ fragment <<EOF
 
 #if defined(TARGET_IS_armpe) || defined(TARGET_IS_arm_wince_pe)
 #define PE_DEF_SECTION_ALIGNMENT	0x00001000
-#define	PE_DEF_SUBSYSTEM		9
+#define	PE_DEF_SUBSYSTEM		3
 #else
 #define PE_DEF_SECTION_ALIGNMENT	0x00000400
 #define	PE_DEF_SUBSYSTEM		2
@@ -410,11 +410,7 @@ static definfo init[] =
   D(MinorOperatingSystemVersion,"__minor_os_version__", 0, FALSE),
   D(MajorImageVersion,"__major_image_version__", 1, FALSE),
   D(MinorImageVersion,"__minor_image_version__", 0, FALSE),
-#if defined(TARGET_IS_armpe)  || defined(TARGET_IS_arm_wince_pe)
-  D(MajorSubsystemVersion,"__major_subsystem_version__", 3, FALSE),
-#else
   D(MajorSubsystemVersion,"__major_subsystem_version__", 4, FALSE),
-#endif
   D(MinorSubsystemVersion,"__minor_subsystem_version__", 0, FALSE),
   D(Subsystem,"__subsystem__", ${SUBSYSTEM}, FALSE),
   D(SizeOfStackReserve,"__size_of_stack_reserve__", 0x200000, FALSE),
-- 
2.1.2

